 -----
 Sensor Planning Service (SPS)
 -----
 Julian Kuhlmann
 -----
 2009-07-12
 -----

Design Documentation
~~~~~~~~~~~~~~~~~~

	The 52\xB0North SPS implementation is a framework for handling miscellaneous sensors. It consists of three components: 
	
		* the Controller: serves as a frontend to validate incoming requests and to forward them to the other two
		  components depending on the kind of request
	
		* the ProfileManager (PM): is responsible for answering GetCapabilites-, DescribeTasking- and
		  DescribeResultAccess-requests 
	
		* the AssetManager (AM): this component is the main part of the application. GetFeasibility-,
		  Submit-, GetStatus-, Update and Cancel-requests are delivered to this service. The AM is a framework
		  that is capable of supporting every type of sensor as long as a plugin has been provided and registerd
		  for this sensor type. A description of how to develop plugins for the SPS can be found 
          {{{https://svn.52north.org/svn/swe/main/SPS/Services/tags/52N-swe-sps-1.0.1/doc/HowTo-Install_SPS.pdf}here}}.
	
	The following figure provides an overview of the framework's components (the WNS is optional):

[../../images/sps_components_model.png]

	As the distribution of the components is not specified, an exemplary deployment might look like this:

[../../images/sps_exemplary_deployment_model.png]

	Being able to distribute the components on several machines allows you to make best use of your hardware.
	The controller may run on a dedicated gateway server, running with high network security settings and acting 
	as a link between the Internet and your private network. The other components may then run on separate machines, 
	depending on processing and data storage requirements of the sensor plugins executed by the AM.

	Apart from the operations specified by the OGC, the framework offers multiple service operations for administrating 
	its components. Main operations include:
	
		* Registration of new sensor plugins and instances.
		
		* Getting a detailed status description of a sensor instance.
		
		* Updating information about the services offering the data gathered by a sensor instance.
		
		* Updating a registered sensor.
		
		* Cancelling tasks of a sensor (useful if a user with high priority wants to use the sensor).
		
		* Unregistering a sensor plugin or instance.
		
		* Setting the SPSs basic service description (i.e. the information defined by OGC OWS for all OGC web services: 
		  service identification and provider as well as operations metadata the contents are generated by the framework).
		
		* Define an alias for a better human remindable sensorID
